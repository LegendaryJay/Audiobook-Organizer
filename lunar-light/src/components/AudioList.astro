---
import AudioCard from './AudioCard.astro';

// For SSR, we'll load data dynamically in the browser
let audioItems = [];
---

<div id="audio-list">
  <div id="loading" class="text-center py-8 text-gray-400">
    Loading audiobook data...
  </div>
  <div id="no-data" class="text-center py-8 text-gray-400" style="display: none;">
    No audiobook data available. Click "Fetch Metadata" or "Fetch Audible" to scan for audiobooks.
  </div>
  
  <!-- Pagination Controls (Top) -->
  <div id="pagination-top" class="flex justify-between items-center mb-4 p-4 bg-gray-800 rounded-lg" style="display: none;">
    <div class="flex items-center space-x-2">
      <span class="text-gray-300 text-sm">Items per page:</span>
      <select id="items-per-page" class="bg-gray-700 text-white px-2 py-1 rounded text-sm">
        <option value="10">10</option>
        <option value="25" selected>25</option>
        <option value="50">50</option>
        <option value="100">100</option>
      </select>
    </div>
    
    <div class="flex items-center space-x-2">
      <span id="pagination-info" class="text-gray-300 text-sm"></span>
    </div>
    
    <div class="flex items-center space-x-1">
      <button id="first-page" onclick="goToPage(1)" 
              class="px-3 py-1 bg-gray-700 hover:bg-gray-600 text-white rounded text-sm disabled:opacity-50 disabled:cursor-not-allowed">
        First
      </button>
      <button id="prev-page" onclick="goToPrevPage()" 
              class="px-3 py-1 bg-gray-700 hover:bg-gray-600 text-white rounded text-sm disabled:opacity-50 disabled:cursor-not-allowed">
        Previous
      </button>
      <span id="page-numbers" class="flex items-center space-x-1"></span>
      <button id="next-page" onclick="goToNextPage()" 
              class="px-3 py-1 bg-gray-700 hover:bg-gray-600 text-white rounded text-sm disabled:opacity-50 disabled:cursor-not-allowed">
        Next
      </button>
      <button id="last-page" onclick="goToLastPage()" 
              class="px-3 py-1 bg-gray-700 hover:bg-gray-600 text-white rounded text-sm disabled:opacity-50 disabled:cursor-not-allowed">
        Last
      </button>
    </div>
  </div>
  
  <div id="audio-cards" style="display: none;">
    <!-- Audio cards will be populated here -->
  </div>
  
  <!-- Pagination Controls (Bottom) -->
  <div id="pagination-bottom" class="flex justify-center items-center mt-4 p-4 bg-gray-800 rounded-lg" style="display: none;">
    <div class="flex items-center space-x-1">
      <button onclick="goToPage(1)" 
              class="px-3 py-1 bg-gray-700 hover:bg-gray-600 text-white rounded text-sm disabled:opacity-50 disabled:cursor-not-allowed" 
              id="first-page-bottom">
        First
      </button>
      <button onclick="goToPrevPage()" 
              class="px-3 py-1 bg-gray-700 hover:bg-gray-600 text-white rounded text-sm disabled:opacity-50 disabled:cursor-not-allowed" 
              id="prev-page-bottom">
        Previous
      </button>
      <span id="page-numbers-bottom" class="flex items-center space-x-1"></span>
      <button onclick="goToNextPage()" 
              class="px-3 py-1 bg-gray-700 hover:bg-gray-600 text-white rounded text-sm disabled:opacity-50 disabled:cursor-not-allowed" 
              id="next-page-bottom">
        Next
      </button>
      <button onclick="goToLastPage()" 
              class="px-3 py-1 bg-gray-700 hover:bg-gray-600 text-white rounded text-sm disabled:opacity-50 disabled:cursor-not-allowed" 
              id="last-page-bottom">
        Last
      </button>
    </div>
  </div>
</div>

<script>
  let audioItems = [];
  let selectedAudibleData = {}; // Track selected audible data for each item
  
  // Pagination variables
  let currentPage = 1;
  let itemsPerPage = 25;
  let totalItems = 0;
  let totalPages = 0;

  // Server-Sent Events for real-time updates
  let eventSource = null;

  function initializeEventSource() {
    if (eventSource) {
      eventSource.close();
    }
    
    eventSource = new EventSource('http://localhost:4000/api/events');
    
    eventSource.onmessage = function(event) {
      try {
        const data = JSON.parse(event.data);
        console.log('[SSE] Received event:', data);
        
        switch(data.type) {
          case 'status_update':
            handleStatusUpdate(data);
            break;
          case 'scan_complete':
            handleScanComplete(data);
            break;
          case 'purge_complete':
            handlePurgeComplete(data);
            break;
          case 'organize_complete':
            handleOrganizeComplete(data);
            break;
        }
      } catch (error) {
        console.error('[SSE] Error parsing event:', error);
      }
    };
    
    eventSource.onerror = function(event) {
      console.log('[SSE] Connection error, will retry...');
    };
  }

  function handleStatusUpdate(data) {
    console.log('[SSE] Status update received:', data);
    // Find and update the specific item
    const itemIndex = audioItems.findIndex(item => item.original?.uuid === data.data.uuid);
    if (itemIndex !== -1) {
      audioItems[itemIndex].status = data.data.status;
      console.log(`[SSE] Updated status for ${data.data.title} to ${data.data.status}`);
      renderAudioCards();
    } else {
      console.log('[SSE] Item not found in current page, refreshing data');
      loadData(currentPage, itemsPerPage);
    }
  }

  function handleScanComplete(data) {
    console.log('[SSE] Scan complete received:', data);
    // Reload data after scan to show new/updated items
    loadData(currentPage, itemsPerPage);
  }

  function handlePurgeComplete(data) {
    console.log('[SSE] Purge complete received:', data);
    // Reload data after purge (reset to page 1 since items might have changed significantly)
    loadData(1, itemsPerPage);
  }

  function handleOrganizeComplete(data) {
    console.log('[SSE] Organize complete received:', data);
    // Reload data after organize to remove moved items and update counts
    loadData(currentPage, itemsPerPage);
  }

  function updateStatus(index, status) {
    const item = audioItems[index];
    const uuid = item.original?.uuid;
    
    console.log('updateStatus called:', { index, status, item, uuid });
    
    if (!uuid) {
      console.error('No UUID found for item:', item);
      return;
    }
    
    fetch(`http://localhost:4000/api/audiobooks/${uuid}/status`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status })
    }).then(r => r.json()).then(data => {
      if (data.success) {
        audioItems[index].status = status;
        renderAudioCards();
      } else {
        console.error('Failed to update status:', data.error || 'Unknown error');
      }
    }).catch(e => console.error('Failed to update status:', e));
  }

  function acceptChanges(index) {
    updateStatus(index, 'accepted');
  }

  function skipChanges(index) {
    updateStatus(index, 'ignored');
  }

  function undoChanges(index) {
    updateStatus(index, 'pending');
  }

  function toggleManualSearch(index) {
    const searchDiv = document.getElementById(`manual-search-${index}`);
    if (searchDiv) {
      searchDiv.classList.toggle('hidden');
      searchDiv.classList.toggle('flex');
      if (!searchDiv.classList.contains('hidden')) {
        const input = document.getElementById(`manual-query-${index}`);
        if (input) input.focus();
      }
    }
  }

  function cancelManualSearch(index) {
    const searchDiv = document.getElementById(`manual-search-${index}`);
    const input = document.getElementById(`manual-query-${index}`);
    if (searchDiv) {
      searchDiv.classList.add('hidden');
      searchDiv.classList.remove('flex');
    }
    if (input) input.value = '';
  }

  async function executeManualSearch(index) {
    const input = document.getElementById(`manual-query-${index}`);
    const item = audioItems[index];
    const uuid = item.original?.uuid;
    
    if (!uuid) {
      console.error('Cannot perform search: No UUID found');
      return;
    }

    try {
      let response;
      
      if (!input || !input.value.trim()) {
        response = await fetch(`http://localhost:4000/api/audible/${uuid}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
      } else {
        response = await fetch(`http://localhost:4000/api/audiobooks/${uuid}/manual-search`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ query: input.value.trim() })
        });
      }

      const data = await response.json();
      
      if (data.success) {
        audioItems[index].audible_suggestions = data.audible_suggestions || [];
        audioItems[index].selected_audible_id = data.selected_audible_id || 1;
        
        if (data.audible_suggestions && data.audible_suggestions.length > 0) {
          const selectedId = data.selected_audible_id || 1;
          const selectedSuggestion = data.audible_suggestions.find(s => s.id === selectedId) || data.audible_suggestions[0];
          audioItems[index].new = selectedSuggestion;
          selectedAudibleData[index] = data.audible_suggestions.findIndex(s => s.id === selectedId) || 0;
        }
        
        cancelManualSearch(index);
        renderAudioCards();
      } else {
        console.error('Search failed:', data.error || 'Unknown error');
      }
    } catch (error) {
      console.error('Error performing search:', error.message);
    }
  }

  function selectAudibleSuggestion(itemIndex, suggestionIndex) {
    console.log(`selectAudibleSuggestion called: itemIndex=${itemIndex}, suggestionIndex=${suggestionIndex}`);
    
    const item = audioItems[itemIndex];
    console.log('Current item:', item);
    
    if (item.audible_suggestions && item.audible_suggestions[suggestionIndex]) {
      const suggestion = item.audible_suggestions[suggestionIndex];
      const suggestionId = suggestion.id;
      console.log(`Selecting suggestion ${suggestionId}: ${suggestion.title}`);
      
      const uuid = item.original?.uuid;
      if (uuid && suggestionId) {
        console.log(`Making API call to select suggestion ${suggestionId} for UUID ${uuid}`);
        
        fetch(`http://localhost:4000/api/audiobooks/${uuid}/select-audible`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ selected_id: suggestionId })
        }).then(r => r.json()).then(data => {
          console.log('API response:', data);
          
          if (data.success) {
            console.log(`Successfully selected audible suggestion ${suggestionId} for ${item.original?.title}`);
            
            // Update the local audiobook data
            item.selected_audible_id = suggestionId;
            item.new = data.selected_suggestion;
            
            console.log('Updated item:', item);
            
            // Update the selected audible data tracking
            selectedAudibleData[itemIndex] = suggestionIndex;
            console.log('Updated selectedAudibleData:', selectedAudibleData);
            
            // Re-render the cards to show the updated selection
            renderAudioCards();
            
            // Close the dropdown
            const dropdown = document.getElementById(`audible-dropdown-${itemIndex}`);
            const arrow = document.getElementById(`dropdown-arrow-${itemIndex}`);
            if (dropdown) dropdown.style.display = 'none';
            if (arrow) arrow.style.transform = 'rotate(0deg)';
            
          } else {
            console.error('Failed to update selection:', data.error);
            alert(`Failed to update selection: ${data.error}`);
          }
        }).catch(e => {
          console.error('Failed to update selection:', e);
          alert(`Failed to update selection: ${e.message}`);
        });
      } else {
        console.error('Missing UUID or suggestion ID:', { uuid, suggestionId });
      }
    } else {
      console.error('Invalid item or suggestion index:', { item, suggestionIndex });
    }
  }

  function toggleAudibleDropdown(itemIndex) {
    const dropdown = document.getElementById(`audible-dropdown-${itemIndex}`);
    const arrow = document.getElementById(`dropdown-arrow-${itemIndex}`);
    const isVisible = dropdown.style.display === 'block';
    
    document.querySelectorAll('[id^="audible-dropdown-"]').forEach(d => d.style.display = 'none');
    document.querySelectorAll('[id^="dropdown-arrow-"]').forEach(a => a.style.transform = 'rotate(0deg)');
    
    dropdown.style.display = isVisible ? 'none' : 'block';
    if (arrow) {
      arrow.style.transform = isVisible ? 'rotate(0deg)' : 'rotate(180deg)';
    }
  }

  function calculateRuntimeDelta(originalRuntime, newRuntime) {
    if (!originalRuntime || !newRuntime) return '';
    const delta = newRuntime - originalRuntime;
    if (Math.abs(delta) <= 1) return '';
    return delta > 0 ? `<span style="color: red;">(+${delta})</span>` : `<span style="color: red;">(${delta})</span>`;
  }

  function getSelectedSuggestion(item) {
    if (!item.audible_suggestions || item.audible_suggestions.length === 0) {
      return null;
    }
    
    const selectedId = item.selected_audible_id || 1;
    const selectedSuggestion = item.audible_suggestions.find(s => s.id === selectedId);
    return selectedSuggestion || item.audible_suggestions[0];
  }

  function renderAudioCards() {
    const container = document.getElementById('audio-cards');
    if (!container) return;

    if (audioItems.length === 0) {
      document.getElementById('loading').style.display = 'none';
      document.getElementById('no-data').style.display = 'block';
      document.getElementById('audio-cards').style.display = 'none';
      return;
    }

    container.innerHTML = '';
    
    audioItems.forEach((item, index) => {
      const cardDiv = document.createElement('div');
      cardDiv.className = `flex flex-col gap-2 p-4 border-b border-gray-700 rounded-lg transition ${
        item.status === 'accepted' ? 'bg-blue-900/50 border-blue-600' : 
        item.status === 'ignored' ? 'bg-gray-800 border-gray-600' : 
        item.status === 'broken' ? 'bg-red-900/50 border-red-600' : 'bg-gray-800'
      }`;
      
      cardDiv.innerHTML = `
        <div class="flex items-center justify-between gap-4">
          <div class="flex-1">
            ${renderAudioInfo(item.original || {}, item.status, false, null, null)}
          </div>
          <div class="arrow text-2xl mx-4 text-gray-500">➡</div>
          <div class="flex-1 relative">
            <div class="flex items-center gap-2">
              <div class="flex-1">
                ${getSelectedSuggestion(item) ? renderAudioInfo(getSelectedSuggestion(item), item.status, true, item.original, item.audible_suggestions) : renderNoAudibleInfo()}
              </div>
              ${item.audible_suggestions && item.audible_suggestions.length > 1 ? `
                <button onclick="toggleAudibleDropdown(${index}); event.stopPropagation();" 
                        class="flex-shrink-0 p-2 text-gray-400 hover:text-gray-200 hover:bg-gray-700 rounded transition-colors"
                        title="Show ${item.audible_suggestions.length} suggestions">
                  <svg class="w-4 h-4 transform transition-transform" id="dropdown-arrow-${index}" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"/>
                  </svg>
                </button>
              ` : ''}
            </div>
            ${item.audible_suggestions && item.audible_suggestions.length > 1 ? `
              <div id="audible-dropdown-${index}" class="absolute top-full left-0 right-0 bg-gray-800 border border-gray-600 rounded-lg shadow-lg z-50 max-h-96 overflow-y-auto" style="display: none;">
                ${item.audible_suggestions.map((suggestion, suggestionIndex) => {
                  const selectedId = item.selected_audible_id || (item.audible_suggestions[0] ? item.audible_suggestions[0].id : 1);
                  const isSelected = suggestion.id === selectedId;
                  return `
                    <div onclick="selectAudibleSuggestion(${index}, ${suggestionIndex}); event.stopPropagation();" class="p-3 border-b border-gray-700 hover:bg-gray-700 cursor-pointer ${isSelected ? 'bg-blue-900/50' : ''}">
                      ${renderAudioInfo(suggestion, item.status, true, item.original, null)}
                    </div>
                  `;
                }).join('')}
              </div>
            ` : ''}
          </div>
        </div>
        ${renderButtons(index, item.status)}
        <div id="manual-search-${index}" class="hidden gap-2 items-center mt-2">
          <input type="text" id="manual-query-${index}" placeholder="Enter search query..." class="flex-1 px-3 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded focus:border-blue-500 focus:outline-none" onkeydown="if(event.key==='Enter') executeManualSearch(${index})">
          <button class="px-3 py-2 bg-green-600 text-white rounded flex items-center justify-center hover:bg-green-700" onclick="executeManualSearch(${index})" title="Search">
            <span class="material-icons">search</span>
          </button>
          <button class="px-3 py-2 bg-gray-500 text-gray-300 rounded flex items-center justify-center hover:bg-gray-600" onclick="cancelManualSearch(${index})" title="Cancel">
            <span class="material-icons">close</span>
          </button>
        </div>
      `;
      
      container.appendChild(cardDiv);
    });

    document.getElementById('loading').style.display = 'none';
    document.getElementById('no-data').style.display = 'none';
    document.getElementById('audio-cards').style.display = 'block';
  }

  function renderAudioInfo(info, status, isAudibleCard = false, originalInfo = null, audibleSuggestions = null) {
    let coverSource = '';
    if (info.cover_url) {
      coverSource = info.cover_url;
    } else if (info.coverImage) {
      if (info.coverImage.startsWith('/covers/')) {
        coverSource = `http://localhost:4000${info.coverImage}`;
      } else if (info.coverImage.startsWith('http')) {
        coverSource = info.coverImage;
      } else {
        coverSource = `http://localhost:4000/covers/${info.coverImage}`;
      }
    }

    const title = info.title || 'Missing';
    const subtitle = info.subtitle || '';
    const author = info.author || 'Missing';
    const narrator = info.narrator || '';
    const runtime = info.runtime_length_min || '';
    const series = info.series || '';
    const bookNumber = info.book_number || '';
    const paths = info.paths || [];

    let runtimeDisplay = runtime ? `Length: ${runtime} min` : '';
    if (isAudibleCard && originalInfo && originalInfo.runtime_length_min && runtime) {
      const delta = calculateRuntimeDelta(originalInfo.runtime_length_min, runtime);
      runtimeDisplay = `Length: ${runtime} min ${delta}`;
    }

    return `
      <div class="flex items-center rounded-lg transition ${
        status === 'accepted' ? 'bg-blue-900/30 border border-blue-600 shadow' : 
        status === 'ignored' ? 'bg-gray-700 border border-gray-600 opacity-60' : 
        status === 'broken' ? 'bg-red-900/30 border border-red-600' : 'bg-gray-700 border border-gray-600'
      }" style="${status === 'ignored' || status === 'broken' ? 'padding:0.5rem;' : 'padding:1rem;'}">
        ${(status !== 'ignored' && status !== 'broken') ? `
          <div class="flex-shrink-0">
            ${coverSource ? `
              <img src="${coverSource}" alt="Cover" class="w-32 h-32 rounded shadow object-contain" style="object-fit:contain; background-color: #000;" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
            ` : ''}
            <div style="display:${coverSource ? 'none' : 'flex'};" class="w-32 h-32 rounded shadow bg-gray-600 flex items-center justify-center text-xs text-gray-400">
              No cover image
            </div>
          </div>
        ` : ''}
        <div class="${status === 'ignored' || status === 'broken' ? 'ml-2 flex flex-col text-sm' : 'ml-6 flex flex-col'} flex-1">
          <div class="flex items-center justify-between">
            <p class="font-semibold ${status === 'broken' ? 'text-red-300' : status === 'accepted' ? 'text-blue-300' : 'text-gray-100'}">${title}${subtitle ? `<span class="font-normal"> - ${subtitle}</span>` : ''}</p>
          </div>
          <p class="${status === 'broken' ? 'text-red-400' : 'text-gray-300'}">${author}</p>
          ${narrator ? `<p class="text-gray-400">Narrated by: ${narrator}</p>` : ''}
          ${runtimeDisplay ? `<p class="text-gray-400">${runtimeDisplay}</p>` : ''}
          ${series ? `<p class="text-blue-400">Series: ${series}${bookNumber ? ` #${bookNumber}` : ''}</p>` : ''}
          ${paths.length > 1 ? `
            <details>
              <summary class="text-xs text-gray-500 break-all cursor-pointer">${paths[0]}</summary>
              <ul class="ml-4 mt-1 text-xs text-gray-500">
                ${paths.map(p => `<li>${p.split(/[\\\/]/).pop()}</li>`).join('')}
              </ul>
            </details>
          ` : paths.length === 1 ? `
            <p class="text-xs text-gray-500 break-all">${paths[0]}</p>
          ` : `
            <p class="text-xs text-gray-500 break-all">No file path</p>
          `}
        </div>
      </div>
    `;
  }

  function renderNoAudibleInfo() {
    return `
      <div class="flex items-center rounded-lg transition bg-gray-700 border border-gray-600" style="padding:1rem;">
        <div class="flex-shrink-0">
          <div class="w-32 h-32 rounded shadow bg-gray-600 flex items-center justify-center text-xs text-gray-400">
            No Audible data
          </div>
        </div>
        <div class="ml-6 flex flex-col flex-1">
          <div class="flex items-center justify-between">
            <p class="font-semibold text-gray-400">No Audible suggestions available</p>
          </div>
          <p class="text-gray-500">Click "Manual Search" to search for Audible data</p>
        </div>
      </div>
    `;
  }

  function renderButtons(index, status) {
    if (status === 'pending') {
      return `
        <div class="flex gap-2 mt-2">
          <button class="px-3 py-2 bg-blue-600 text-white rounded flex items-center justify-center hover:bg-blue-700" onclick="acceptChanges(${index})" title="Accept Changes">
            <span class="material-icons">check</span>
          </button>
          <button class="px-3 py-2 bg-gray-300 text-gray-800 rounded flex items-center justify-center hover:bg-gray-400" onclick="skipChanges(${index})" title="Skip">
            <span class="material-icons">arrow_forward</span>
          </button>
          <button class="px-3 py-2 bg-yellow-400 text-gray-900 rounded flex items-center justify-center hover:bg-yellow-500" onclick="toggleManualSearch(${index})" title="Manual Search">
            <span class="material-icons">search</span>
          </button>
        </div>
      `;
    } else if (status === 'accepted') {
      return `
        <div class="flex gap-2 mt-2">
          <button class="px-3 py-2 bg-blue-500 text-white rounded flex items-center justify-center hover:bg-blue-600" onclick="undoChanges(${index})" title="Undo">
            <span class="material-icons">undo</span>
          </button>
        </div>
      `;
    } else if (status === 'ignored') {
      return `
        <div class="flex gap-2 mt-2">
          <button class="px-3 py-2 bg-gray-500 text-white rounded flex items-center justify-center hover:bg-gray-600" onclick="undoChanges(${index})" title="Undo">
            <span class="material-icons">undo</span>
          </button>
        </div>
      `;
    }
    return '';
  }

  // Make functions available globally
  window.updateStatus = updateStatus;
  window.selectAudibleSuggestion = selectAudibleSuggestion;
  window.toggleAudibleDropdown = toggleAudibleDropdown;
  window.acceptChanges = acceptChanges;
  window.skipChanges = skipChanges;
  window.undoChanges = undoChanges;
  window.toggleManualSearch = toggleManualSearch;
  window.cancelManualSearch = cancelManualSearch;
  window.executeManualSearch = executeManualSearch;

  // Load data function with pagination support
  async function loadData(page = 1, limit = itemsPerPage) {
    console.log(`loadData called - fetching page ${page} with limit ${limit}...`);
    try {
      const offset = (page - 1) * limit;
      const response = await fetch(`http://localhost:4000/api/audiobooks?offset=${offset}&limit=${limit}`);
      console.log('API Response status:', response.status);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('API Response data:', result);
      
      if (result.items && Array.isArray(result.items)) {
        console.log(`Found ${result.items.length} audiobook items out of ${result.total} total`);
        
        // Update pagination variables
        totalItems = result.total || 0;
        totalPages = Math.ceil(totalItems / limit);
        currentPage = page;
        itemsPerPage = limit;
        
        // Transform backend data to match frontend expectations
        audioItems = result.items.map((item, itemIndex) => {
          let selectedSuggestion = null;
          let selectedIndex = 0;
          
          if (item.audible_suggestions && item.audible_suggestions.length > 0) {
            const selectedId = item.selected_audible_id || 1;
            
            for (let i = 0; i < item.audible_suggestions.length; i++) {
              if (item.audible_suggestions[i].id === selectedId) {
                selectedSuggestion = item.audible_suggestions[i];
                selectedIndex = i;
                break;
              }
            }
            
            if (!selectedSuggestion) {
              selectedSuggestion = item.audible_suggestions[0];
              selectedIndex = 0;
            }
          }
          
          if (item.audible_suggestions && item.audible_suggestions.length > 0) {
            selectedAudibleData[itemIndex] = selectedIndex;
          }
          
          return {
            original: item.original || {},
            audible_suggestions: item.audible_suggestions || [],
            selected_audible_id: item.selected_audible_id || null,
            status: item.status || 'pending'
          };
        });
        
        console.log('Transformed audioItems:', audioItems);
      } else {
        console.log('No items found in response or items is not an array');
        audioItems = [];
      }
      
      renderAudioCards();
      updatePaginationControls();
    } catch (error) {
      console.error('Failed to load data:', error);
      document.getElementById('loading').style.display = 'none';
      document.getElementById('no-data').style.display = 'block';
      document.getElementById('audio-cards').style.display = 'none';
    }
  }

  // Pagination functions
  function updatePaginationControls() {
    const paginationTop = document.getElementById('pagination-top');
    const paginationBottom = document.getElementById('pagination-bottom');
    const paginationInfo = document.getElementById('pagination-info');
    
    if (totalItems === 0) {
      paginationTop.style.display = 'none';
      paginationBottom.style.display = 'none';
      return;
    }
    
    paginationTop.style.display = 'flex';
    paginationBottom.style.display = 'flex';
    
    // Update pagination info
    const startItem = (currentPage - 1) * itemsPerPage + 1;
    const endItem = Math.min(currentPage * itemsPerPage, totalItems);
    paginationInfo.textContent = `Showing ${startItem}-${endItem} of ${totalItems} audiobooks`;
    
    // Update page numbers for both top and bottom
    updatePageNumbers('page-numbers');
    updatePageNumbers('page-numbers-bottom');
    
    // Update button states
    updateButtonStates();
  }
  
  function updatePageNumbers(containerId) {
    const container = document.getElementById(containerId);
    container.innerHTML = '';
    
    if (totalPages <= 1) return;
    
    const maxVisiblePages = 5;
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
    
    // Adjust if we're near the end
    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    for (let i = startPage; i <= endPage; i++) {
      const button = document.createElement('button');
      button.textContent = i.toString();
      button.onclick = () => goToPage(i);
      button.className = `px-3 py-1 text-sm rounded ${
        i === currentPage 
          ? 'bg-blue-600 text-white' 
          : 'bg-gray-700 hover:bg-gray-600 text-white'
      }`;
      container.appendChild(button);
    }
  }
  
  function updateButtonStates() {
    const buttons = [
      'first-page', 'prev-page', 'next-page', 'last-page',
      'first-page-bottom', 'prev-page-bottom', 'next-page-bottom', 'last-page-bottom'
    ];
    
    buttons.forEach(id => {
      const button = document.getElementById(id);
      if (button) {
        const isFirst = id.includes('first') || id.includes('prev');
        const shouldDisable = isFirst ? currentPage === 1 : currentPage === totalPages;
        button.disabled = shouldDisable;
      }
    });
  }
  
  window.goToPage = function(page) {
    if (page >= 1 && page <= totalPages && page !== currentPage) {
      loadData(page, itemsPerPage);
    }
  };
  
  window.goToPrevPage = function() {
    if (currentPage > 1) {
      goToPage(currentPage - 1);
    }
  };
  
  window.goToNextPage = function() {
    if (currentPage < totalPages) {
      goToPage(currentPage + 1);
    }
  };
  
  window.goToLastPage = function() {
    goToPage(totalPages);
  };
  
  // Handle items per page change
  document.addEventListener('DOMContentLoaded', function() {
    const itemsPerPageSelect = document.getElementById('items-per-page');
    if (itemsPerPageSelect) {
      itemsPerPageSelect.addEventListener('change', function() {
        const newLimit = parseInt(this.value);
        loadData(1, newLimit); // Reset to page 1 when changing items per page
      });
    }
  });

  // Load data when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    loadData();
    initializeEventSource();
  });
  
  // Listen for refresh events from the parent page
  document.addEventListener('refreshData', () => loadData());
  
  // Listen for clear data events (e.g., when purge starts)
  document.addEventListener('clearAudioData', () => {
    audioItems = [];
    totalItems = 0;
    totalPages = 0;
    currentPage = 1;
    renderAudioCards();
    updatePaginationControls();
  });

  // Cleanup event source when page unloads
  window.addEventListener('beforeunload', () => {
    if (eventSource) {
      eventSource.close();
    }
  });

  // Close dropdowns when clicking outside
  document.addEventListener('click', function(event) {
    const target = event.target;
    if (!target) return;
    
    if (!target.closest('[id^="audible-dropdown-"]') && !target.closest('button[onclick*="toggleAudibleDropdown"]')) {
      document.querySelectorAll('[id^="audible-dropdown-"]').forEach(d => {
        d.style.display = 'none';
      });
      document.querySelectorAll('[id^="dropdown-arrow-"]').forEach(a => {
        a.style.transform = 'rotate(0deg)';
      });
    }
  });
</script>
